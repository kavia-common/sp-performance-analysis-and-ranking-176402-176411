{"is_source_file": true, "format": "Python", "description": "This source file for the ranking_service.py module provides functions for managing and computing financial symbol rankings, including database interactions, scoring functions, and core ranking logic, as well as classes and functions for handling rankings, calculations, and data retrieval.", "external_files": ["../config", "../db", ".batching", ".finhub_client"], "external_methods": ["settings.BATCH_SIZE", "settings.MAX_CONCURRENCY", "get_db", "run_in_batches", "FinnhubClient.get_key_metrics", "FinnhubClient.aclose"], "published": ["create_run", "update_run", "get_run_status", "run_ranking", "get_latest_results"], "classes": [], "methods": [{"name": "Optional[float] _safe_float(x: Any)", "description": "Safely converts input to float, returning None if conversion fails or input is None.", "scope": "", "scopeKind": ""}, {"name": "float _buffett_score(metrics: Dict[str, Optional[float]])", "description": "Calculates a score based on financial metrics such as ROE, ROA, margins, and debt/equity ratio, inspired by Buffett's investment principles.", "scope": "", "scopeKind": ""}, {"name": "float _cramer_score(metrics: Dict[str, Optional[float]])", "description": "Calculates a score based on P/E ratio and net margin, inspired by Cramer-like valuation.", "scope": "", "scopeKind": ""}, {"name": "List[Dict[str,Any]] _list_symbols()", "description": "Fetches list of symbols with metadata from the database asynchronously.", "scope": "", "scopeKind": ""}, {"name": "int create_run(formula_mode: str)", "description": "Creates a new ranking run record in the database with 'queued' status and returns its ID.", "scope": "", "scopeKind": ""}, {"name": "None update_run(run_id: int, status: str, progress: int = 0, message: Optional[str] = None)", "description": "Updates the status, progress, and message for a ranking run identified by run_id.", "scope": "", "scopeKind": ""}, {"name": "Optional[Dict[str,Any]] get_run_status(run_id: Optional[int])", "description": "Retrieves current status information for the latest or specified ranking run.", "scope": "", "scopeKind": ""}, {"name": "None run_ranking(run_id: int, formula_mode: str)", "description": "Main function to calculate and store rankings for all symbols based on selected scoring formula; handles batch processing, scoring, ranking, and database persistence.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] get_latest_results( page: int = 0, page_size: int = 25, sort_by: str = \"combined_rank\", sort_dir: str = \"asc\", formula_mode: str = \"both\", sectors: Optional[List[str]] = None, market_cap_min: Optional[float] = None, market_cap_max: Optional[float] = None, completeness: Optional[float] = None, )", "description": "Fetches the latest ranking results with optional pagination, sorting, and filtering.", "scope": "", "scopeKind": ""}, {"name": "List[Tuple[str,Dict[str,Optional[float]]]] handle_batch(batch: List[Dict[str, Any]])", "scope": "run_ranking", "scopeKind": "function", "description": "unavailable"}, {"name": "List[int] rank_scores(vals: List[Optional[float]])", "scope": "run_ranking", "scopeKind": "function", "description": "unavailable"}], "calls": ["asyncio", "math", "time", "typing.Any", "typing.Dict", "typing.List", "typing.Optional", "aiosqlite", "../config.settings", "../db.get_db", ".batching.run_in_batches", ".finnhub_client.FinnhubClient", ".finnhub_client.FinnhubClient.get_key_metrics", ".finnhub_client.FinnhubClient.aclose"], "search-terms": ["ranking_service", "score_buffett", "score_cramer", "run_in_batches", "get_latest_results", "run_ranking", "create_run", "update_run", "list_symbols", "asyncio", "aScoped", "ranking", "financial metrics"], "state": 2, "file_id": 30, "knowledge_revision": 63, "git_revision": "", "ctags": [{"_type": "tag", "name": "_buffett_score", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^def _buffett_score(metrics: Dict[str, Optional[float]]) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "function", "signature": "(metrics: Dict[str, Optional[float]])"}, {"_type": "tag", "name": "_cramer_score", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^def _cramer_score(metrics: Dict[str, Optional[float]]) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "function", "signature": "(metrics: Dict[str, Optional[float]])"}, {"_type": "tag", "name": "_list_symbols", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def _list_symbols() -> List[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:List[Dict[str,Any]]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "_safe_float", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^def _safe_float(x: Any) -> Optional[float]:$/", "language": "Python", "typeref": "typename:Optional[float]", "kind": "function", "signature": "(x: Any)"}, {"_type": "tag", "name": "create_run", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def create_run(formula_mode: str) -> int:$/", "language": "Python", "typeref": "typename:int", "kind": "function", "signature": "(formula_mode: str)"}, {"_type": "tag", "name": "get_latest_results", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def get_latest_results($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( page: int = 0, page_size: int = 25, sort_by: str = \"combined_rank\", sort_dir: str = \"asc\", formula_mode: str = \"both\", sectors: Optional[List[str]] = None, market_cap_min: Optional[float] = None, market_cap_max: Optional[float] = None, completeness: Optional[float] = None, )"}, {"_type": "tag", "name": "get_run_status", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def get_run_status(run_id: Optional[int]) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "function", "signature": "(run_id: Optional[int])"}, {"_type": "tag", "name": "handle_batch", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^    async def handle_batch(batch: List[Dict[str, Any]]) -> List[Tuple[str, Dict[str, Optional[fl/", "file": true, "language": "Python", "typeref": "typename:List[Tuple[str,Dict[str,Optional[float]]]]", "kind": "function", "signature": "(batch: List[Dict[str, Any]])", "scope": "run_ranking", "scopeKind": "function"}, {"_type": "tag", "name": "rank_scores", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^        def rank_scores(vals: List[Optional[float]]) -> List[int]:$/", "file": true, "language": "Python", "typeref": "typename:List[int]", "kind": "function", "signature": "(vals: List[Optional[float]])", "scope": "run_ranking", "scopeKind": "function"}, {"_type": "tag", "name": "run_ranking", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def run_ranking(run_id: int, formula_mode: str) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(run_id: int, formula_mode: str)"}, {"_type": "tag", "name": "update_run", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/services/ranking_service.py", "pattern": "/^async def update_run(run_id: int, status: str, progress: int = 0, message: Optional[str] = None)/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(run_id: int, status: str, progress: int = 0, message: Optional[str] = None)"}], "hash": "bcb442a3d5de672af4ceb0a5703f565f", "format-version": 4, "code-base-name": "sp_ranking_frontend", "filename": "sp_ranking_backend/src/services/ranking_service.py", "revision_history": [{"63": ""}]}