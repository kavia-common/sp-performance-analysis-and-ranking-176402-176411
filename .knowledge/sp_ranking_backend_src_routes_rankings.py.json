{"is_source_file": true, "format": "Python", "description": "This is a FastAPI route module defining API endpoints for handling operations related to ranking runs, including triggering runs, checking status, fetching latest results, and exporting rankings as Excel or CSV files.", "external_files": ["../config", "../db", "../utils/excel_export", "../services/ranking_service"], "external_methods": ["create_run", "get_latest_results", "get_run_status", "run_ranking", "get_db", "build_excel_from_items"], "published": ["router"], "classes": [{"name": "RunRequest", "description": "A Pydantic data model defining the request schema for running a ranking, including formula mode and options."}], "methods": [{"name": "Dict[str,Any] rankings_run(body: RunRequest, background: BackgroundTasks)", "description": "API endpoint to trigger a ranking run, initiating background processing.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] rankings_status(run_id: Optional[int] = Query(default=None))", "description": "API endpoint to fetch the status of the latest or specified ranking run.", "scope": "", "scopeKind": ""}, {"name": "Dict[str,Any] rankings_latest( page: int = Query(0, ge=0, description=\"Page index (0-based)\"), pageSize: int = Query(25, ge=1, le=1000, description=\"Page size\"), sortBy: str = Query(\"combined_rank\", description=\"Sort field\"), sortDir: str = Query(\"asc\", description=\"Sort direction asc|desc\"), formula_mode: str = Query(\"both\", description=\"Formula mode to view\"), sectors: Optional[List[str]] = Query(default=None, description=\"Filter by sectors (repeatable)\"), marketCapMin: Optional[float] = Query(default=None, description=\"Minimum market cap\"), marketCapMax: Optional[float] = Query(default=None, description=\"Maximum market cap\"), completeness: Optional[float] = Query(default=None, description=\"Minimum completeness (0-100)\"), )", "description": "API endpoint to retrieve the latest ranking results with pagination and filtering.", "scope": "", "scopeKind": ""}, {"name": "rankings_export( run_id: Optional[int] = Query(default=None, description=\"Run id to export; defaults to latest completed\"), format: str = Query(default=\"excel\", description=\"Format: excel|csv\"), )", "description": "API endpoint to export ranking results for a specified or latest completed run as Excel or CSV.", "scope": "", "scopeKind": ""}], "calls": ["create_run(fm)", "get_run_status(run_id)", "run_ranking(run_id, fm)", "get_latest_results(page, page_size, sort_by, sort_dir, formula_mode, sectors, market_cap_min, market_cap_max, completeness)", "get_db()", "build_excel_from_items(items, sheet_name)"], "search-terms": ["rankings API", "background ranking trigger", "ranking run status", "ranking export", "Excel ranking export", "ranking filtering", "ranking pagination"], "state": 2, "file_id": 33, "knowledge_revision": 69, "git_revision": "", "ctags": [{"_type": "tag", "name": "RunRequest", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^class RunRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "formula_mode", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^    formula_mode: str = Field(..., description=\"Ranking formula mode: buffett | cramer | both\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "RunRequest", "scopeKind": "class"}, {"_type": "tag", "name": "options", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^    options: Dict[str, Any] = Field(default_factory=dict, description=\"Optional run options\\/fil/", "language": "Python", "typeref": "typename:Dict[str, Any]", "kind": "variable", "scope": "RunRequest", "scopeKind": "class"}, {"_type": "tag", "name": "rankings_export", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^async def rankings_export($/", "language": "Python", "kind": "function", "signature": "( run_id: Optional[int] = Query(default=None, description=\"Run id to export; defaults to latest completed\"), format: str = Query(default=\"excel\", description=\"Format: excel|csv\"), )"}, {"_type": "tag", "name": "rankings_latest", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^async def rankings_latest($/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "( page: int = Query(0, ge=0, description=\"Page index (0-based)\"), pageSize: int = Query(25, ge=1, le=1000, description=\"Page size\"), sortBy: str = Query(\"combined_rank\", description=\"Sort field\"), sortDir: str = Query(\"asc\", description=\"Sort direction asc|desc\"), formula_mode: str = Query(\"both\", description=\"Formula mode to view\"), sectors: Optional[List[str]] = Query(default=None, description=\"Filter by sectors (repeatable)\"), marketCapMin: Optional[float] = Query(default=None, description=\"Minimum market cap\"), marketCapMax: Optional[float] = Query(default=None, description=\"Maximum market cap\"), completeness: Optional[float] = Query(default=None, description=\"Minimum completeness (0-100)\"), )"}, {"_type": "tag", "name": "rankings_run", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^async def rankings_run(body: RunRequest, background: BackgroundTasks) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(body: RunRequest, background: BackgroundTasks)"}, {"_type": "tag", "name": "rankings_status", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^async def rankings_status(run_id: Optional[int] = Query(default=None)) -> Dict[str, Any]:$/", "language": "Python", "typeref": "typename:Dict[str,Any]", "kind": "function", "signature": "(run_id: Optional[int] = Query(default=None))"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/routes/rankings.py", "pattern": "/^router = APIRouter(tags=[\"Rankings\"])$/", "language": "Python", "kind": "variable"}], "hash": "2a38c7faf9a0d553fc8d65103ae718ae", "format-version": 4, "code-base-name": "sp_ranking_frontend", "filename": "sp_ranking_backend/src/routes/rankings.py", "fields": [{"name": "str formula_mode", "scope": "RunRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "Dict[str, Any] options", "scope": "RunRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "router = APIRouter(tags=[\"Rankings\"])", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"69": ""}]}