{"is_source_file": true, "format": "Python", "description": "This file provides database utility functions for managing an SQLite database connection, setting performance pragmas, initializing the database schema, and handling asynchronous context management for database operations in a Python project.", "external_files": ["from .config import settings"], "external_methods": ["settings.DB_URL", "aiosqlite.connect", "aiosqlite.Row", "conn.execute", "conn.close", "conn.executescript", "asyncio.get_event_loop", "asyncio.create_task", "asyncio.run"], "published": ["get_db", "init_db", "init_db_sync"], "classes": [], "methods": [{"name": "None _run_pragmas(conn: aiosqlite.Connection)", "description": "Sets specific PRAGMA options on the SQLite connection to optimize performance and enforce foreign key constraints.", "scope": "", "scopeKind": ""}, {"name": "AsyncIterator[aiosqlite.Connection] get_db()", "description": "Asynchronous context manager that yields an aiosqlite connection after applying performance pragmas, ensuring proper cleanup.", "scope": "", "scopeKind": ""}, {"name": "None init_db(schema_path: Optional[str] = None)", "description": "Initializes the database by applying schema.sql if the target table 'symbols' does not exist.", "scope": "", "scopeKind": ""}, {"name": "None init_db_sync()", "description": "Runs the asynchronous init_db function synchronously, suitable for startup hooks or scripts.", "scope": "", "scopeKind": ""}], "calls": ["aiosqlite.connect", "conn.execute", "conn.close", "conn.executescript", "settings.DB_URL", "_run_pragmas", "asyncio.get_event_loop", "asyncio.create_task", "asyncio.run"], "search-terms": ["database initialization", "SQLite pragmas", "async database connection", "schema.sql", "db setup", "aiosqlite", "async context manager", "database schema check"], "state": 2, "file_id": 25, "knowledge_revision": 54, "git_revision": "", "ctags": [{"_type": "tag", "name": "SCHEMA_PATH", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/db.py", "pattern": "/^SCHEMA_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"db\", \"schema.sql\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "_run_pragmas", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/db.py", "pattern": "/^async def _run_pragmas(conn: aiosqlite.Connection) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(conn: aiosqlite.Connection)"}, {"_type": "tag", "name": "get_db", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/db.py", "pattern": "/^async def get_db() -> AsyncIterator[aiosqlite.Connection]:$/", "language": "Python", "typeref": "typename:AsyncIterator[aiosqlite.Connection]", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "init_db", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/db.py", "pattern": "/^async def init_db(schema_path: Optional[str] = None) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "(schema_path: Optional[str] = None)"}, {"_type": "tag", "name": "init_db_sync", "path": "/home/kavia/workspace/code-generation/sp-performance-analysis-and-ranking-176402-176411/sp_ranking_backend/src/db.py", "pattern": "/^def init_db_sync() -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "()"}], "hash": "97fe539c87b4369a18de1d5e48e3d2fd", "format-version": 4, "code-base-name": "sp_ranking_frontend", "filename": "sp_ranking_backend/src/db.py", "fields": [{"name": "SCHEMA_PATH = os.path.join(os.path.dirname(os.path.dirname(__file__)), \"db\", \"schema.sql\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"54": ""}]}